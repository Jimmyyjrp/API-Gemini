from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage, MessageEvent, TextMessage
from google.generativeai import GenerativeModel
import google.generativeai as genai
import re

# LINE API Access Token ‡πÅ‡∏•‡∏∞ Channel Secret
CHANNEL_ACCESS_TOKEN = 'rLoSpWjE4tJlrvLQXZN1ki7c9oWmvjJ+jNrtEnp7h80oh4D3GauvvdIOug9fEDeLbx7opxXfRBVmsxS57K2eh2tITggJuBJ5XxhNFLMumNK/pkaxfxZ7mh7o20pWMixtdK2IcqvHAioxIMrpRrHj7wdB04t89/1O/w1cDnyilFU='
CHANNEL_SECRET = 'fff648004304c3a6bcde6c056eecd810'

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini
genai.configure(api_key="AIzaSyCMra2j44ztGyuTP8MzkJirs1TFtzuHpmo")
model = genai.GenerativeModel("gemini-2.0-flash")

# LINE Bot API
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# Flask app
app = Flask(__name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini
def generate_answer(user_message):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏°‡∏≤‡∏Å ‡πÜ  
‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏à‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ  
‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏•‡∏á ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ü‡∏±‡∏á  
‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏∏‡∏ó‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡∏à‡∏ô‡∏£‡∏Å‡∏ô‡∏∞)

‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ "‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏±‡πâ‡∏¢", "‡∏≠‡∏µ‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á", "‡∏Ç‡∏≠‡∏≠‡∏µ‡∏Å", ‡∏Ø‡∏•‡∏Ø  
‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤  
‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡πÉ‡∏ô‡πÇ‡∏ó‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡∏∂‡∏á‡∏ô‡πà‡∏≤‡∏î‡∏π 

‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ:
- ‚Äú‡πÇ‡∏≠‡πâ‡∏¢‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà‡πÄ‡∏•‡∏¢ üí•‚Äù
- ‚Äú‡πÄ‡∏≠‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏±‡∏á‡∏≠‡πà‡∏∞ ‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏ô‡∏•‡∏∏‡∏Å!‚Äù
- ‚Äú‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏°‡∏≤‡∏Å ‡πÜ ‡∏î‡∏π‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏Ñ‡∏•‡∏≠‡∏≠‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ü•π‚Äù

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡πÅ‡∏ô‡∏ß, ‡∏õ‡∏µ, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•, ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå (‡πÄ‡∏ä‡πà‡∏ô MyAnimeList ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ)
‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á, ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô, ‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£, ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏û‡∏•‡∏á, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÜ

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ‚Äú{user_message}‚Äù
"""
    response = model.generate_content(prompt)
    return response.text.strip()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    user_id = event.source.user_id

    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏ß‡∏à‡∏µ‡∏ö
    flirting_keywords = [
        "‡∏°‡∏µ‡πÅ‡∏ü‡∏ô‡∏¢‡∏±‡∏á", "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ü‡∏ô‡∏¢‡∏±‡∏á", "‡∏à‡∏µ‡∏ö‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°", "‡∏à‡∏µ‡∏ö‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢", "‡πÇ‡∏™‡∏î‡πÑ‡∏´‡∏°", "‡πÅ‡∏ü‡∏ô‡∏¢‡∏±‡∏á", 
        "‡∏ï‡∏Å‡∏´‡∏•‡∏∏‡∏°‡∏£‡∏±‡∏Å", "‡∏Ñ‡∏∏‡∏ì‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", "‡∏ä‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó", "‡∏ö‡∏≠‡∏ó‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏à‡∏µ‡∏ö‡∏ö‡∏≠‡∏ó"
    ]
    if any(keyword in user_message.lower() for keyword in flirting_keywords):
        reply = "‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πà‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πÇ‡∏≠‡∏∞ ‡∏à‡∏µ‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞ ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏ô‡∏∞~"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
        return

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini
    answer = generate_answer(user_message)

    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    clean_answer = re.sub(r"\*+", "", answer)
    clean_answer = re.sub(r"\[(.*?)\]\((.*?)\)", r"\1\n\2", clean_answer)
    clean_answer = clean_answer.replace("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:", "üé¨ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:")
    clean_answer = clean_answer.replace("‡πÅ‡∏ô‡∏ß:", "üß≠ ‡πÅ‡∏ô‡∏ß:")
    clean_answer = clean_answer.replace("‡∏õ‡∏µ:", "üìÖ ‡∏õ‡∏µ:")
    clean_answer = clean_answer.replace("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:", "‚ù§Ô∏è ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:")
    clean_answer = clean_answer.replace("‡∏•‡∏¥‡∏á‡∏Å‡πå:", "üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå:")

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=clean_answer))

# Webhook
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except Exception as e:
        print(f"Error: {e}")
        abort(400)
    return 'OK'

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
